# -*- coding: utf-8 -*-
"""Rekayasa Data End to End Pipeline Data Engineering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Shr4EIDd1E_84AP1CtwRveR4JD_dmgc

## Tugas Akhir Rekayasa Data: End to End Data Engineering Project

Fahrin Ulya Nisrina (22/497708/TK/54557)

 Aisa Selvira Q.A  (22/498561/TK/54690)
"""

!pip install psycopg2-binary pandas sqlalchemy

"""Load data dari database"""

import pandas as pd
import psycopg2

#Aiven PostgreSQL connection details
DB_HOST = 'rekdat-rekdat.e.aivencloud.com'
DB_PORT = '11360'
DB_NAME = 'defaultdb'
DB_USER = 'avnadmin'
DB_PASSWORD = ''
SSL_MODE = 'require'

#Koneksi ke PostgreSQL
try:
    conn = psycopg2.connect(
        host=DB_HOST,
        database=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD,
        port=DB_PORT,
        sslmode=SSL_MODE
    )

    #Query untuk mengambil data
    query = """
    SELECT
        exxon.timestamp AS timestamp,
        exxon.close AS exxon_close,
        tesla.close AS tesla_close
    FROM
        exxon_stock_data exxon
    JOIN
        tesla_stock_data tesla
    ON
        exxon.timestamp = tesla.timestamp
    ORDER BY
        exxon.timestamp;
    """

    #Load data ke DataFrame pandas
    data = pd.read_sql(query, conn)
    print(data.head())

except Exception as e:
    print("Error connecting to Aiven PostgreSQL:", e)

finally:
    if 'conn' in locals() and conn:
        conn.close()

"""Mengecek data telah ditransform"""

#Memastikan data tersedia
print(data.head())

#Memeriksa apakah ada nilai kosong
print("Missing values per column:")
print(data.isnull().sum())

#Mengecek apakah ada duplikasi pada timestamp
duplicate_timestamps = data.index.duplicated().sum()
if duplicate_timestamps > 0:
    print(f"Data memiliki {duplicate_timestamps} timestamp yang terduplikasi. Menghapus duplikasi...")
else:
    print("Tidak ada timestamp yang terduplikasi.")

#Mengecek tipe data kolom timestamp
print(f"Tipe data timestamp: {data.timestamp.dtype}")

"""Task transform berhasil membersihkan dan menstandarkan format data."""

#Menghitung korelasi
correlation = data[['exxon_close', 'tesla_close']].corr()
print("Correlation matrix:\n", correlation)

"""Kedua kolom mempunyai korelasi negatif. Hal ini menunjukkan bahwa jika data saham Tesla meningkat, maka saham ExxonMobile akan cenderung menurun.

Berikut ini adalah visualisasi data saham Tesla dan ExxonMobil.
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
plt.plot(data['timestamp'], data['exxon_close'], label='ExxonMobil', color='blue')
plt.plot(data['timestamp'], data['tesla_close'], label='Tesla', color='red')
plt.xlabel("Timestamp")
plt.ylabel("Harga Saham")
plt.title("Harga Saham: Tesla dan ExxonMobil")
plt.legend()
plt.show()

"""# Modelling"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

#Split data training dan testing
#Variabel independen
X = data[['tesla_close']]
#Variabel dependen
y = data['exxon_close']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Model training menggunakan Linear Regression
model = LinearRegression()
model.fit(X_train, y_train)

#Visualisasi hubungan Tesla terhadap Exxon di data training
plt.figure(figsize=(8, 6))
plt.scatter(X_train, y_train, color='blue', label='Actual Data')
plt.plot(X_train, model.predict(X_train), color='red', label='Regression Line')
plt.title('Visualisasi hubungan Tesla terhadap Exxon di data training')
plt.xlabel('Saham Tesla')
plt.ylabel('Saham ExxonMobil')
plt.legend()
plt.show()

#Membuat prediksi
y_pred = model.predict(X_test)

# Visualisasi hasil prediksi vs actual
plt.figure(figsize=(12, 6))
plt.scatter(X_test.index, y_test, label='Actual: Saham ExxonMobil', color='blue')
plt.scatter(X_test.index, y_pred, label='Predicted: Saham ExxonMobil', color='red')
plt.title('Visualisasi data prediksi Saham ExxonMobil')
plt.xlabel('Time')
plt.ylabel('Close Price')
plt.legend()
plt.show()


# Evaluasi
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2): {r2}")

"""Nilai MSE 0.3693 relatif besar, terutama jika dibandingkan dengan skala data saham ExxonMobil dan Tesla (nilai close berkisar ratusan dolar). Hal ini menunjukkan bahwa model memiliki kesalahan prediksi yang cukup besar.
Nilai RÂ² sebesar -0.1186 juga menunjukkan bahwa model gagal menjelaskan variasi dalam data.
"""

plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color="blue", label="Actual Data")
plt.plot(X_test, y_pred, color="red", label="Regression Line")
plt.title("Saham Tesla vs Saham ExxonMobil Regression")
plt.xlabel("Tesla Close Price")
plt.ylabel("ExxonMobil Close Price")
plt.legend()
plt.show()